#######################################################################################################
#data frame with quantiles, quantile type and year
#######################################################################################################
colnames(Q) <- c("DOY")
Q$Q  <- rep(seq(0,100,25),length(ph.ct))
Q$P  <- sort(rep(CT.P,length(seq(0,100,25))))
Q$Y <- YEAR
head(ph.mask)
boxplot(Q$DOY ~ Q$P)
Q.P <- split(Q,Q$P)
#######################################################################################################
#color scheme definition -> http://www.color-hex.com/
#######################################################################################################
#optional: automatic
#nclr <- length(Q.P)+1
#col.p <- brewer.pal(nclr,"Spectral")
#optional: manual
col.p <- c("#3288BD", #10
"#e5f4e3", #12
"#66C2A5", #13
"#F46D43", #24
"#D53E4F") #AH
#######################################################################################################
#plotting
#######################################################################################################
setwd(file.path(w.dir,plot.dir))
pdf(paste('phase_',CT,'_',YEAR,'window_starfm',c(".pdf"),sep=""), height=4.2,width=12)
DOY <- data.frame(DOY=-50:420,NDVI=-1)
plot(DOY,
xaxt="n",
ylim=c(0,1),
xlim=c(-40,400),
ylab=as.expression(bquote(italic(NDVI))))
#axis
x1 <- seq(1,365,10)
x2 <- seq(1,360,2)
axis(1, at=x2, col.tick="grey", las=1,labels=FALSE)
axis(1, at=x1, col.axis="black", las=1)
{
#P10
rect(Q.P[[1]][1,1],#min
0,
Q.P[[2]][2,1],#max
1,
border = "white",
col=col.p[1],
density=100)
#P12
rect(Q.P[[2]][2,1],#min
0,
Q.P[[3]][1,1],#max
1,
border = "white",
col=col.p[2],
density=100)
#P13
rect(Q.P[[3]][1,1],#min
0,
Q.P[[4]][1,1],#max
1,
border = "white",
col=col.p[3],
density=100)
#P24
rect(Q.P[[4]][1,1],#min
0,
Q.P[[4]][5,1],#max
1,
border = "white",
col=col.p[4],
density=100)
#After harvest 1
rect(Q.P[[4]][5,1],#min
0,
365,#max
1,
border = "white",
col=col.p[5],
density=100)
#After harvest 2
rect(0,#min
0,
Q.P[[1]][1,1],#max
1,
border = "white",
col=col.p[5],
density=100)
}
for(i in DOY.RE){
abline(v = i, col = "blue", lwd=2,lty=1)
}
for(i in DOY.LS){
abline(v = i, col = "black", lwd=2,lty=2)
}
legend("topleft",
title="Imagery",
legend=c("LS","RE"),
lty=c(2,1),
col=c("black","blue"),
lwd=c(2,2),
bty="n")
legend("bottomleft",
title=expression(paste(italic(NDVI))),
legend=c(expression(tilde(italic(x))),
expression(paste(italic(x)^{25-75}))),
pch=c(19,NA),lty=c(NA,1),lwd=c(0,2),col=c("red","black"),bty="n")
legend("bottomright", title="Phases",legend=c("10","12","13","24","AH"),fill=col.p,bty="n")
dev.off()
#######################################################################################################
#######################################################################################################
#######################################################################################################
#plot of phase- and crop-specific phenological windows and corresponding NDVI quantiles
#######################################################################################################
#######################################################################################################
#######################################################################################################
#packages
#######################################################################################################
loadandinstall <- function(mypkg) {if (!is.element(mypkg,
installed.packages()[,1])){install.packages(mypkg)};
library(mypkg, character.only=TRUE)  }
pk <- c("raster","rgdal","maptools","sp","pheno","RColorBrewer","classInt","snow","parallel")
for(i in pk){loadandinstall(i)}
#######################################################################################################
#working directory, data and settings
#######################################################################################################
w.dir <- "c:/Users/ProBoSA/Dropbox/_uni/_projekte/_final-report/_model/"
vector.dir <- "_lpis/_data/"
vector.shp <- "_lpis/_data/crop2011_tile3262922_epsg25832.shp"
raster1.dir <- "_window/_data/"
raster2.dir <- "_starfm/_result/"
plot.dir <- "_starfm/_plot/"
#CROP TYPE: 115 - Winter Wheat, 131 - Winter Barley, 311 - Rapeseed, 411 - Maize, 620 - Sugar Beet
CT <- 620
#CROP TYPE
YEAR <- 2011
#projection (EPSG code)
epsg  <- "+init=epsg:25832"
#CROP TYPE PHASES
CT.P <- c(10,12,13,24)
#RapidEye imagery
DOY.RE <- c(date2jul2(7,3,2011)$doy,
date2jul2(9,4,2011)$doy,
date2jul2(18,4,2011)$doy,
date2jul2(24,4,2011)$doy,
date2jul2(8,5,2011)$doy,
date2jul2(22,5,2011)$doy,
date2jul2(6,6,2011)$doy,
date2jul2(16,7,2011)$doy,
date2jul2(26,8,2011)$doy,
date2jul2(2,9,2011)$doy,
date2jul2(21,9,2011)$doy,
date2jul2(24,9,2011)$doy,
date2jul2(2,10,2011)$doy,
date2jul2(13,11,2011)$doy,
date2jul2(28,11,2011)$doy)
DOY.LS <- c(112, 128, 208, 272, 288)
#######################################################################################################
#import shape
#######################################################################################################
shape <- shapefile(file.path(w.dir,vector.shp))
#select crop type
shape.ct <- shape[shape$NU_CODE == CT,]
#assignment of a projection
proj4string(shape.ct) <- CRS(epsg)
#######################################################################################################
#select raster folder
#######################################################################################################
setwd(file.path(w.dir,raster1.dir))
ph.ct <- list.files(pattern="(Jultag_result253).*2011\\.tif$")
ph.ct.v <- 1:length(ph.ct)
#######################################################################################################
#crop- and phase-specific quantile calculation
#######################################################################################################
#Initialize progress bar display:
pb1 <- winProgressBar(title="Progress bar: Phase quantile calculation", min=0, max=length(ph.ct), initial=0)
#empty data frame
Q <- data.frame(Q=NULL)
for (i in ph.ct.v){
setwd(file.path(w.dir,raster1.dir))
ph <- raster(ph.ct[i])
###mask
ptm <- proc.time()
#run functions in parallel
beginCluster( detectCores() -1) #use all but one core
ph.crop <- crop(ph, extent(shape.ct))
proj4string(ph.crop) <- CRS(epsg)
ph.mask <- mask(ph.crop, shape.ct)
endCluster()
proc.time() - ptm
#quantile calculation
Q <- rbind(Q,round(quantile(ph.mask)[[1]],0))
Q <- rbind(Q,round(quantile(ph.mask)[[2]],0))
Q <- rbind(Q,round(quantile(ph.mask)[[3]],0))
Q <- rbind(Q,round(quantile(ph.mask)[[4]],0))
Q <- rbind(Q,round(quantile(ph.mask)[[5]],0))
setWinProgressBar(pb1, i)
}
#######################################################################################################
#data frame with quantiles, quantile type and year
#######################################################################################################
colnames(Q) <- c("DOY")
Q$Q  <- rep(seq(0,100,25),length(ph.ct))
Q$P  <- sort(rep(CT.P,length(seq(0,100,25))))
Q$Y <- YEAR
head(ph.mask)
boxplot(Q$DOY ~ Q$P)
Q.P <- split(Q,Q$P)
#######################################################################################################
#color scheme definition -> http://www.color-hex.com/
#######################################################################################################
#optional: automatic
#nclr <- length(Q.P)+1
#col.p <- brewer.pal(nclr,"Spectral")
#optional: manual
col.p <- c("#3288BD", #10
"#e5f4e3", #12
"#66C2A5", #13
"#F46D43", #24
"#D53E4F") #AH
#######################################################################################################
#plotting
#######################################################################################################
setwd(file.path(w.dir,plot.dir))
pdf(paste('phase_',CT,'_',YEAR,'window_starfm',c(".pdf"),sep=""), height=4.2,width=12)
DOY <- data.frame(DOY=-50:420,NDVI=-1)
plot(DOY,
xaxt="n",
ylim=c(0,1),
xlim=c(-40,400),
ylab=as.expression(bquote(italic(NDVI))))
#axis
x1 <- seq(1,365,10)
x2 <- seq(1,360,2)
axis(1, at=x2, col.tick="grey", las=1,labels=FALSE)
axis(1, at=x1, col.axis="black", las=1)
{
#P10
rect(Q.P[[1]][1,1],#min
0,
Q.P[[2]][2,1],#max
1,
border = "white",
col=col.p[1],
density=100)
#P12
rect(Q.P[[2]][2,1],#min
0,
Q.P[[3]][1,1],#max
1,
border = "white",
col=col.p[2],
density=100)
#P13
rect(Q.P[[3]][1,1],#min
0,
Q.P[[4]][1,1],#max
1,
border = "white",
col=col.p[3],
density=100)
#P24
rect(Q.P[[4]][1,1],#min
0,
Q.P[[4]][5,1],#max
1,
border = "white",
col=col.p[4],
density=100)
#After harvest 1
rect(Q.P[[4]][5,1],#min
0,
365,#max
1,
border = "white",
col=col.p[5],
density=100)
#After harvest 2
rect(0,#min
0,
Q.P[[1]][1,1],#max
1,
border = "white",
col=col.p[5],
density=100)
}
for(i in DOY.RE){
abline(v = i, col = "blue", lwd=2,lty=1)
}
for(i in DOY.LS){
abline(v = i, col = "black", lwd=2,lty=2)
}
setwd(file.path(w.dir,raster2.dir))
ndvi <- list.files(pattern="*ndvi.asc$")
ndvi.v <- 1:length(ndvi)
#Initialize progress bar display:
pb2 <- winProgressBar(title="Progress bar: NDVI quantile calculation", min=0, max=length(ndvi), initial=0)
for(i in ndvi.v){
ndvi.doy <- raster(ndvi[i])
#extract DOY from input file
A <- as.numeric(substr(ndvi[i],nchar(ndvi[i])-11,nchar(ndvi[i])-9))
#masking <- run functions in parallel
beginCluster( detectCores() -1) #use all but one core
ndvi.doy.crop <- crop(ndvi.doy, extent(shape.ct))
proj4string(ndvi.doy.crop) <- CRS(epsg)
ndvi.doy.mask <- mask(ndvi.doy.crop, shape.ct)
endCluster()
#all values < 0 <- NA
ndvi.doy.mask[ndvi.doy.mask<0] <- NA
#calculate quantile
quantile(ndvi.doy.mask)
B <- quantile(ndvi.doy.mask)[[2]]
C <- quantile(ndvi.doy.mask)[[3]]
D <- quantile(ndvi.doy.mask)[[4]]
#draw NDVI line
segments(A, B, A, D, col= "black",lwd=2)
#plot median
points(A,C,col="red",pch=19,cex=1)
setWinProgressBar(pb2, i)
}
legend("topleft",
title="Imagery",
legend=c("LS","RE"),
lty=c(2,1),
col=c("black","blue"),
lwd=c(2,2),
bty="n")
legend("bottomleft",
title=expression(paste(italic(NDVI))),
legend=c(expression(tilde(italic(x))),
expression(paste(italic(x)^{25-75}))),
pch=c(19,NA),lty=c(NA,1),lwd=c(0,2),col=c("red","black"),bty="n")
legend("topright", title="Phases",legend=c("10","12","13","24","AH"),fill=col.p,bty="n")
dev.off()
close(pb1)
close(pb2)
loadandinstall <- function(mypkg) {if (!is.element(mypkg,
installed.packages()[,1])){install.packages(mypkg)};
library(mypkg, character.only=TRUE)  }
pk <- c("raster","rgdal","maptools","sp","mclust","Rcmdr")
for(i in pk){loadandinstall(i)}
setwd(file.path(choose.dir(default = "", caption = "Choose working directory")))
raster.dir <- "_data/_starfm/"
vector.dir <- "_data/_vector/"
result.dir <- "_result"
#######################################################################################################
#threshold for cloud cover
#######################################################################################################
TH <- 30
setwd(file.path(vector.dir))
setwd(file.path(choose.dir(default = "", caption = "Choose working directory")))
wd
w.dir <- file.path(choose.dir(default = "", caption = "Choose working directory"))
w.dir
setwd(file.path(w.dir,raster.dir))
pattern.ls <- list.files(pattern="*.*\\.bin$")
pattern.ls
setwd(file.path(w.dir,vector.dir))
raster.dir <- "_data/_starfm/"
vector.dir <- "_data/_vector/"
result.dir <- "_result"
setwd(file.path(w.dir,vector.dir))
list.files(pattern="*.*\\.shp$")
vector.shp <- list.files(pattern="*.*\\.shp$")
shape <- readOGR(file.path(w.dir,vector.dir), substr(vector.shp,1,nchar(vector.shp)-4))
setwd(file.path(w.dir,raster.dir))
pattern.ls <- list.files(pattern="*.*\\.bin$")
pattern.ls
#reading raster and conversation to RASTER object
for (i in pattern.ls){
setwd(file.path(w.dir,raster.dir))
ndvi <- raster(i)
#crop
ndvi.crop <- crop(ndvi, extent(shape),cellnumbers=TRUE)
CL <- freq(ndvi.crop,value=-9999)*100/sum(freq(ndvi.crop)[,2])
#export
setwd(file.path(w.dir,result.dir))
if(CL < TH)
writeRaster(ndvi.crop, filename=paste('testsite_',i,sep=""), format="ascii", overwrite=TRUE)
}
Filters <- matrix(c("bin", "*.bin","tif", "*.tif", "asc", "*.asc", "flt", "*.flt",
"SAGA", "*.sdat", "All files", "*"),
6, 2, byrow = TRUE)
rownames(Filters) <- c("bin","tif", "asc","flt","SAGA","All files")
print(noquote(rownames(Filters)))
ft <- readline(prompt = "Enter a file format: ")
Filters[c(ft),]
Filters[c(ft),1]
Filters[[c(ft),1]]
print(noquote(rownames(Filters)))
noquote(Filters[[c(ft),1]])
noquote(Filters[[c(ft),1]])
noquote(Filters[[c(ft),1]])
paste("*")
paste("*.*\\")
paste("*.*\\",noquote(Filters[[c(ft),1]]))
paste("*.*\\",noquote(Filters[[c(ft),1]]),sep="")
paste("*.*\\",noquote(Filters[[c(ft),1]]),"$",sep="")
pattern.ls <- list.files(pattern=paste("*.*\\",noquote(Filters[[c(ft),1]]),"$",sep=""))
pattern.ls
setwd(file.path(w.dir,raster.dir))
pattern.ls <- list.files(pattern=paste("*.*\\",noquote(Filters[[c(ft),1]]),"$",sep=""))
pattern.ls
file.path(w.dir,raster.dir)
paste("*.*\\",noquote(Filters[[c(ft),1]]),"$",sep="")
pattern.ls <- list.files(pattern="*.*\\.bin$")
patter.ls
pattern.ls
pattern.ls <- list.files(pattern=paste("*.*\\",noquote(Filters[[c(ft),1]]),"$",sep=""))
pattern.ls
paste("*.*\\",noquote(Filters[[c(ft),1]]),"$",sep="")
pattern.ls <- list.files(pattern=paste("*.*\\.",noquote(Filters[[c(ft),1]]),"$",sep=""))
pattern.ls
#######################################################################################################
#######################################################################################################
#######################################################################################################
#Subsetting of one-band raster files and cloud filter
#######################################################################################################
#######################################################################################################
#######################################################################################################
#packages
#######################################################################################################
loadandinstall <- function(mypkg) {if (!is.element(mypkg,
installed.packages()[,1])){install.packages(mypkg)};
library(mypkg, character.only=TRUE)}
pk <- c("raster","rgdal","maptools","sp")
for(i in pk){loadandinstall(i)}
#######################################################################################################
#Interactive choosing of working directory
#######################################################################################################
w.dir <- file.path(choose.dir(default = "", caption = "Choose working directory"))
setwd(file.path(choose.dir(default = "", caption = "Choose working directory")))
raster.dir <- "_data/_starfm/"
vector.dir <- "_data/_vector/"
result.dir <- "_result"
#######################################################################################################
#threshold for cloud cover
#######################################################################################################
TH <- 30
#######################################################################################################
#import shape
#######################################################################################################
setwd(file.path(w.dir,vector.dir))
list.files(pattern="*.*\\.shp$")
vector.shp <- list.files(pattern="*.*\\.shp$")
shape <- readOGR(file.path(w.dir,vector.dir), substr(vector.shp,1,nchar(vector.shp)-4))
#######################################################################################################
#Definition of possible data  formates
#######################################################################################################
Filters <- matrix(c("bin", "*.bin","tif", "*.tif", "asc", "*.asc", "flt", "*.flt",
"SAGA", "*.sdat", "All files", "*"),
6, 2, byrow = TRUE)
rownames(Filters) <- c("bin","tif", "asc","flt","SAGA","All files")
print(noquote(rownames(Filters)))
ft <- readline(prompt = "Enter a file format: ")
#import raster
#######################################################################################################
setwd(file.path(w.dir,raster.dir))
pattern.ls <- list.files(pattern="*.*\\.bin$")
pattern.ls <- list.files(pattern=paste("*.*\\.",noquote(Filters[[c(ft),1]]),"$",sep=""))
pattern.ls
#reading raster and conversation to RASTER object
for (i in pattern.ls){
setwd(file.path(w.dir,raster.dir))
ndvi <- raster(i)
#crop
ndvi.crop <- crop(ndvi, extent(shape),cellnumbers=TRUE)
CL <- freq(ndvi.crop,value=-9999)*100/sum(freq(ndvi.crop)[,2])
#export
setwd(file.path(w.dir,result.dir))
if(CL < TH)
writeRaster(ndvi.crop, filename=paste('testsite_',i,sep=""), format="ascii", overwrite=TRUE)
}
Filters <- matrix(c("bin", "*.bin","tif", "*.tif", "asc", "*.asc", "flt", "*.flt",
"SAGA", "*.sdat", "All files", "*"),
6, 2, byrow = TRUE)
rownames(Filters) <- c("bin","tif", "asc","flt","SAGA","All files")
print(noquote(rownames(Filters)))
ft <- readline(prompt = "Enter a file format: ")
setwd(file.path(w.dir,raster.dir))
w.dir
w.dir <- file.path(choose.dir(default = "", caption = "Choose working directory"))
w.dir
setwd(file.path(choose.dir(default = "", caption = "Choose working directory")))
file.path(w.dir,vector.dir)
setwd(file.path(w.dir,vector.dir))
list.files(pattern="*.*\\.shp$")
vector.shp <- list.files(pattern="*.*\\.shp$")
shape <- readOGR(file.path(w.dir,vector.dir), substr(vector.shp,1,nchar(vector.shp)-4))
#######################################################################################################
#Definition of possible data  formates
#######################################################################################################
Filters <- matrix(c("bin", "*.bin","tif", "*.tif", "asc", "*.asc", "flt", "*.flt",
"SAGA", "*.sdat", "All files", "*"),
6, 2, byrow = TRUE)
rownames(Filters) <- c("bin","tif", "asc","flt","SAGA","All files")
print(noquote(rownames(Filters)))
ft <- readline(prompt = "Enter a file format: ")
setwd(file.path(w.dir,raster.dir))
pattern.ls <- list.files(pattern=paste("*.*\\.",noquote(Filters[[c(ft),1]]),"$",sep=""))
pattern.ls
#reading raster and conversation to RASTER object
for (i in pattern.ls){
setwd(file.path(w.dir,raster.dir))
ndvi <- raster(i)
#crop
ndvi.crop <- crop(ndvi, extent(shape),cellnumbers=TRUE)
CL <- freq(ndvi.crop,value=-9999)*100/sum(freq(ndvi.crop)[,2])
#export
setwd(file.path(w.dir,result.dir))
if(CL < TH)
writeRaster(ndvi.crop, filename=paste('testsite_',i,sep=""), format="ascii", overwrite=TRUE)
}
